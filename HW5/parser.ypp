%{
	extern int yylex();
    extern int yylineno;
	void yyerror(const char*);
	#include "bp.hpp"
	#include "utils.h"
	#include "hw3_output.hpp"
	#include "parser.hpp"
	#include "Table.h"
	SymbolTable* table;
	#include <string>
    using namespace std;
    void check_valid_bool(const string &exp);
    string MulDivType(const string &a, const string &b);
    string PlusMinusType(const string &a, const string &b);
    void checkValidCast(const string &type, const string &exp_type);
    void check_valid_in(const string &type1, const string &type2);
    void check_valid_relop(const string &type1, const string &type2);
    void checkValidByte(int val);
%}
%nonassoc x;
%nonassoc ID;
%nonassoc VOID;
%nonassoc INT;
%nonassoc BYTE;
%nonassoc B;
%nonassoc BOOL;
%nonassoc SET;
%nonassoc TRUE;
%nonassoc FALSE;
%nonassoc RETURN;
%nonassoc WHILE;
%nonassoc BREAK;
%nonassoc CONTINUE;
%nonassoc SC;
%nonassoc COMMA;
%nonassoc DOTS;
%nonassoc NUM;
%nonassoc STRING;
%nonassoc LBRACE;
%nonassoc RBRACE;
%right ASSIGN;
%left OR;
%left AND;
%left RELOPL;
%nonassoc RELOPN;
%nonassoc RELOP_IN;
%left PLUSMINUS
%left MULDIV;
%left RPAREN;
%left RBRACKET;
%left LBRACKET;
%left LPAREN;


%right IF;
%right ELSE;
%right NOT;

%%

Program     :   M1 Funcs x{$$ = $1; table->FinalScopeEnd(); printGlobalBuffer();
                                                           printCodeBuffer(); exit(0);}
            ;

M1          :   {table = new SymbolTable(); init_llvm();}
            ;

Funcs       :   {$$ = new Funcs();}   |   FuncDecl Funcs{$$ = new Funcs();}
            ;

FuncDecl    :   RetType ID LPAREN Formals RPAREN {table->addFunction($1, $2, $4);} //<<NEED TO HANDLE ALSO SET_ RETURN i32*
                LBRACE Statements M RBRACE{table->ScopeEnd(); func_end(((Type_var*)$1)->type); backPatch($8->nextlist, ((Node*)($9))->val);}
            ;

RetType     :   Type{$$ = $1;}   |   VOID{$$ = new Type_var("VOID");}
            ;

Formals     :   {$$ = new FormalsList();}   |
                 FormalsList{$$ = $1;}
            ;

FormalsList :   FormalDecl{$$ = new FormalsList(((Argument*)$1)->type, ((Argument*)$1)->name);} |
                FormalDecl COMMA FormalsList
                    {$$ = ((FormalsList*)$3); ((FormalsList*)$$)->addType(((Argument*)$1)->type, ((Argument*)$1)->name); delete $1;}
            ;

FormalDecl  :   Type ID{if(table->isVarDeclared($2) || table->isFuncDeclared($2)){
                        									output::errorDef(yylineno, ((Node*)$2)->val);
                        									exit(1);
                        }
                        $$ = new Argument(((Type_var*)$1)->type, ((Node*)$2)->val);
                        delete $1;
                        delete $2;}
            ;

Statements  :   Statement{$$ = new Statements($1);
                          $$->nextlist = $1->nextlist;
                          $$->breaklist = $1->breaklist;
                          $$->continuelist = $1->continuelist;} |

                Statements M Statement{$$ = new Statements($2, $1);
                                       backPatch($1->nextlist, ((Node*)($2))->val);
                                       $$->nextlist = $3->nextlist;
                                       $$->breaklist = merge($1->breaklist, $3->breaklist);
                                       $$->continuelist = merge($1->continuelist, $3->continuelist);
                                       }
            ;

Statement   :   LBRACE {table->newScope();} Statements RBRACE {table->ScopeEnd(); $$ = $3;}
                                            |
                Type ID SC                 {table->addVar($1, $2);
                                            $$ = new Argument(((Type_var*)$1)->type, ((Node*)$2)->val);
                                            int offset = table->getVarOffset($2);
                                            string stackP = freshReg();
                                            //Handle SET_ init to empty group
                                            emit(stackP + " = getelementptr inbounds i32, i32* %func" + to_string(FUNC_COUNTER) + "args, i32 " + to_string(offset));
                                            emit("store i32 0, i32* " + stackP);
                                            delete $2;
                                            }
                                            |
                Type ID ASSIGN Exp SC      {table->addVar($1, $2);
                                            table->checkValidAssign($2, $4);
                                            $$ = new Argument(((Type_var*)$1)->type, ((Node*)$2)->val, $4);
                                            int offset = table->getVarOffset($2);
                                            exp_handler($4, offset);
                                            delete $1;
                                            delete $2;
                                            delete $3;
                                            delete $5;}  |
                ID ASSIGN Exp SC           {if(!table->isVarDeclared($1)){
                                                output::errorUndef(yylineno, ((Node*)$1)->val);
                                                exit(1);
                                           }
                                           table->checkValidAssign($1, $3);
                                           int offset = table->getVarOffset($1);
                                           exp_handler($3, offset);
                                           }  |
                Call SC                    {$$ = $1;}  |
                RETURN SC                  {table->checkCurrFuncVoid(); emit("ret void");}  |
                RETURN Exp SC              {table->checkRetType($2); return_exp_handler($2);}  |
                IF LPAREN Exp RPAREN EnterScope M Statement
                                            {check_valid_bool(((Expression*)$3)->type);
                                            $$ = new If_statement($3, $7);
                                            table->ScopeEnd();
                                            backPatch($3->truelist, ((Node*)$6)->val);
                                            $$->nextlist = merge($3->falselist, $7->nextlist);
                                            $$->continuelist = $7->continuelist;
                                            $$->breaklist = $7->breaklist;
                                            }  |
                IF LPAREN Exp RPAREN EnterScope M Statement ELSE {table->ScopeEnd();
                                                                  table->newScope();
                                                                  int address = emit("br label @");
                                                                  $7->nextlist = merge($7->nextlist, makeList({address, FIRST}));}
                                                M Statement
                                                                 {check_valid_bool(((Expression*)$3)->type);
                                                                  $$ = new If_statement($3, $6, $9);
                                                                  table->ScopeEnd();
                                                                  backPatch($3->falselist, ((Node*)$10)->val);
                                                                  backPatch($3->truelist, ((Node*)$6)->val);
                                                                  int address = emit("br label @");
                                                                  string label = genLabel();
                                                                  $7->nextlist = merge($7->nextlist, makeList({address, FIRST}));
                                                                  $$->nextlist = merge($7->nextlist, $11->nextlist);
                                                                  backPatch($$->nextlist, label);
                                                                  $$->continuelist = merge($7->continuelist, $11->continuelist);
                                                                  $$->breaklist = merge($7->breaklist, $11->breaklist);
                                                                  }  |
                WHILE M LPAREN Exp RPAREN EnterWhile M Statement {check_valid_bool(((Expression*)$4)->type);
                                                                  table->ScopeEnd();

                                                                  backPatch($8->nextlist, ((Node*)$2)->val);
                                                                  backPatch($4->truelist, ((Node*)$7)->val);
                                                                  backPatch($8->continuelist, ((Node*)$2)->val);
                                                                  $$->nextlist = merge($4->falselist, $8->breaklist);
                                                                  int address = emit("br label @");
                                                                  backPatch(makeList({address, FIRST}), ((Node*)$2)->val);
                                                                  }  |
                BREAK SC                   {table->checkInWhile(true);
                                            int address = emit("br label @");
                                            $$->breaklist = makeList({address, FIRST});}  |
                CONTINUE SC                {table->checkInWhile();
                                            int address = emit("br label @");
                                            $$->continuelist = makeList({address, FIRST});}
            ;

EnterScope  :   {table->newScope();}

EnterWhile  :   {table->newScope(true);}

Call        :   ID LPAREN ExpList RPAREN{
                                            if(!table->isFuncDeclared($1)){output::errorUndefFunc(yylineno, ((Node*)$1)->val);
                                                                         delete $1;
                                                                         delete $3;
                                                                         exit(0);}
                                            table->checkValidArgs($1, ((Exp_list*)$3)->types);
                                            string ret_type = table->getFuncRetType((((Node*)$1)->val));
                                            $$ = new Expression(ret_type);
                                            ((Expression*)$$)->name = "CALL";
                                            $$->regName = func_call($1, $3, ret_type, $$);
                                            delete $1;
                                            delete $3;
                                        }  |
                ID LPAREN RPAREN{
                                    if(!table->isFuncDeclared($1)){output::errorUndefFunc(yylineno, ((Node*)$1)->val);
                                                                     delete $1;
                                                                     exit(0);}
                                    table->checkFuncArgsEmpty($1);
                                    string ret_type = table->getFuncRetType((((Node*)$1)->val));
                                    $$ = new Expression(ret_type);
                                    ((Expression*)$$)->name = "CALL";
                                    $$->regName = func_call_noParam($1, ret_type, $$);
                                    delete $1;
                                    delete $3;

                                }
            ;

ExpList     :   Exp{$$ = new Exp_list(((Expression*)$1)->type, ((Expression*)$1)->name, $1->regName, ((Expression*)$1));}   |
                Exp COMMA ExpList{$$ = ((Exp_list*)$3); ((Exp_list*)$$)->addType(((Expression*)$1)->type, ((Expression*)$1)->name, $1->regName, ((Expression*)$1)) ;}
            ;

Type        :   INT{$$ = new Type_var("INT");}   |   BYTE{$$ = new Type_var("BYTE");}  |
                BOOL{$$ = new Type_var("BOOL");}  |
                SET LBRACKET NUM DOTS NUM RBRACKET{$$ = new Type_var("SET", ((Node*)$3)->val, ((Node*)$5)->val);}
            ;

Exp         :   LPAREN Exp RPAREN   {$$ = $2;}   |
                Exp MULDIV Exp      {string type = MulDivType(((Expression*)$1)->type, ((Expression*)$3)->type);
                                     $$ = new Expression();
                                     ((Expression*)$$)->type = type;
                                     $$->regName = freshReg();
                                     ((Expression*)$$)->name = ((Expression*)$1)->name + " * " + ((Expression*)$2)->name;
                                     operand_handler_no_set(type, ((Node*)$2)->val, $$->regName, $1->regName, $3->regName);
                                     delete $1;
                                     delete $3;
                                     }   |
                Exp PLUSMINUS Exp   {
                                     string type = PlusMinusType(((Expression*)$1)->type, ((Expression*)$3)->type);
                                     $$ = new Expression(type);
                                     $$->regName = freshReg();
                                     //$$$$$$$$$$$$$$$$$$$$$$$NEED TO HANDE SET_ CASE
                                     ((Expression*)$$)->name = ((Expression*)$1)->name + " + " + ((Expression*)$2)->name;
                                     operand_handler_with_set(type, ((Node*)$2)->val, $$->regName, $1->regName, $3->regName);
                                     delete $1;
                                     delete $3;}   |
                ID                  {string type = table->getVarType($1);
                                     $$ = new Expression(type);
                                     ((Expression*)$$)->name = ((Node*)$1)->val;
                                     int offset = table->getVarOffset($1);
                                     id_handler($$, offset); //<<<NEED TO HANDLE IF SET_
                                     delete $1;}   |
                Call                {$$ = $1;}   |
                NUM                 {$$ = new Expression("INT");
                                     ((Expression*)$$)->number = stoi(((Node*)$1)->val);
                                     ((Expression*)$$)->name = ((Node*)$1)->val;
                                     $$->regName = freshReg();
                                     emit($$->regName + " = add i32 0," + to_string(((Expression*)$$)->number));
                                     delete $1;}   |
                NUM B               {checkValidByte(stoi(((Node*)$1)->val));
                                     $$ = new Expression("BYTE");
                                     ((Expression*)$$)->number = stoi(((Node*)$1)->val);
                                     ((Expression*)$$)->name = ((Node*)$1)->val;
                                     $$->regName = freshReg();
                                     emit($$->regName + " = add i32 " + to_string(((Expression*)$$)->number) + ", 0");
                                     delete $1;}   |
                STRING              {$$ = new Expression("STRING", ((Node*)$1)->val);
                                     string_handler($$);
                                     delete $1;}   |
                TRUE                {$$ = new Expression("BOOL");
                                     ((Expression*)$$)->bool_value = true;
                                     ((Expression*)$$)->name = "TRUE";
                                     int address = emit("br label @ ; for true exp");
                                     $$->truelist = makeList({address, FIRST});
                                     delete $1;}   |
                FALSE               {$$ = new Expression("BOOL");
                                     ((Expression*)$$)->bool_value = false;
                                     ((Expression*)$$)->name = "FALSE";
                                     int address = emit("br label @ ; for false exp");
                                     $$->falselist = makeList({address, FIRST});
                                     delete $1;}   |
                NOT Exp             {check_valid_bool(((Expression*)$2)->type);
                                     $$ = new Expression();
                                     ((Expression*)$$)->type = ((Expression*)$2)->type;
                                     ((Expression*)$$)->name = ((Expression*)$2)->name;
                                     $$->truelist = $2->falselist;
                                     $$->falselist = $2->truelist;
                                     delete $2;}   |
                Exp AND M Exp       {check_valid_bool(((Expression*)$1)->type);
                                     check_valid_bool(((Expression*)$4)->type);
                                     $$ = new Expression("BOOL");
                                     ((Expression*)$$)->name = ((Expression*)$1)->name + " and " + ((Expression*)$4)->name;
                                     backPatch($1->truelist, ((Node*)$3)->val);
                                     $$->truelist = $4->truelist;
                                     $$->falselist = merge($1->falselist, $4->falselist);
                                     ((Expression*)$$)->name = ((Expression*)$1)->name + " AND " + ((Expression*)$4)->name;
                                     delete $1;
                                     delete $2;
                                     delete $3;
                                     delete $4;}   |
                Exp OR M Exp        {check_valid_bool(((Expression*)$1)->type);
                                     check_valid_bool(((Expression*)$4)->type);
                                     $$ = new Expression("BOOL");
                                     ((Expression*)$$)->name = ((Expression*)$1)->name + " or " + ((Expression*)$4)->name;
                                     backPatch($1->falselist, ((Node*)$3)->val);
                                     $$->truelist = merge($1->truelist, $4->truelist);
                                     $$->falselist = $4->falselist;
                                     ((Expression*)$$)->name = ((Expression*)$1)->name + " OR " + ((Expression*)$4)->name;
                                     delete $1;
                                     delete $2;
                                     delete $3;
                                     delete $4;}   |
                Exp RELOPL Exp      {check_valid_relop(((Expression*)$1)->type, ((Expression*)$3)->type);
                                     $$ = new Expression("BOOL");
                                     relop_handler($2, $$, $1, $3);
                                     delete $1;
                                     delete $2;
                                     delete $3;}   |
                Exp RELOPN Exp      {check_valid_relop(((Expression*)$1)->type, ((Expression*)$3)->type);
                                     $$ = new Expression("BOOL");
                                     relop_handler($2, $$, $1, $3);
                                     delete $1;
                                     delete $2;
                                     delete $3;}   |

                                     //$$$$$$$$$NEED TO HANDLE THOSE SET_ CASES
                Exp RELOP_IN Exp    {check_valid_in(((Expression*)$1)->type,((Expression*)$3)->type);
                                    $$ = new Expression("BOOL");
                                    delete $1;
                                    delete $3;}   |
                LPAREN Type RPAREN Exp  {checkValidCast(((Type_var*)$2)->type, ((Expression*)$4)->type);
                                         $$ = new Expression("INT");
                                         }
            ;

M:          {
                   int address = emit("br label @");
                   string markerLabel = genLabel();
                   $$ = new Node(markerLabel);
                   backPatch(makeList({address, FIRST}), markerLabel);

            }
            ;

%%

int main()
{

	 return yyparse();

}

void yyerror(const char * message)
{
	output::errorSyn(yylineno);
	exit(1);
}

void checkValidCast(const string &type, const string &exp_type){
    if(exp_type != "SET" || type != "INT"){
        output::errorMismatch(yylineno);
        exit(0);
    }
}

void checkValidByte(int val){
    if(val > 255){
        output::errorByteTooLarge(yylineno, to_string(val));
        exit(0);
    }
}

string PlusMinusType(const string &a, const string &b){
    if(a == "INT" && b == "INT"){
        return "INT";
    }
    if(a == "BYTE" && b == "BYTE"){
        return "BYTE";
    }
   if(a == "INT" && b == "BYTE" || b == "INT" && a == "BYTE"){
        return "INT";
   }
   if(a == "SET"){
	    if(b == "BYTE" || b == "INT"){
	        return "SET";
	    }
   }
   else if (b == "SET"){
       if(a == "BYTE" || a == "INT"){
       	        return "SET";
       	    }
   }
   output::errorMismatch(yylineno);
   exit(0);
}

string MulDivType(const string &a, const string &b){
    if(a == "INT" && b == "INT"){
        return "INT";
    }
    if(a == "BYTE" && b == "BYTE"){
        return "BYTE";
    }
   if(a == "INT" && b == "BYTE" || b == "INT" && a == "BYTE"){
        return "INT";
   }
   output::errorMismatch(yylineno);
   exit(0);
}

void check_valid_bool(const string &exp){
    if(exp != "BOOL"){
      output::errorMismatch(yylineno);
      exit(0);
   }
}

void check_valid_in(const string &type1, const string &type2){
    if((type1 == "INT" || type1 == "BYTE") && type2 == "SET"){
        return;
    }
    output::errorMismatch(yylineno);
    exit(0);
}

void check_valid_relop(const string &type1, const string &type2){
    if((type1 == "INT" || type1 == "BYTE") && (type2 == "INT" || type2 == "BYTE")){
        return;
    }
    output::errorMismatch(yylineno);
    exit(0);
}